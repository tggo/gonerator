package repository

import (
	"context"
	"errors"
	"time"

	"github.com/rs/xid"
	paginate "github.com/tggo/mongo-go-pagination"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.uber.org/zap"

    "{{.Module}}/internal/audit"
	auditModel "{{.Module}}/internal/audit/model"
    "{{.Module}}/{{.OutputDirectory}}{{.DomainNamePlural}}"
    "{{.Module}}/{{.OutputDirectory}}{{.DomainNamePlural}}/model"
    "{{.Module}}/pkg/mg"
)

var objectResource = "{{.DomainName}}"

func New{{.DomainNamePluralCapitalize}}Storage(collName string, ses *mg.Session, auditService audit.ChangeLogService, logger *zap.Logger) {{.DomainNamePlural}}.RepositoryInitializer {
	return &{{.DomainNamePlural}}Storage{
		ses:      ses,
		collName: collName,
		auditService: auditService,
		logger:   logger.With(zap.String("repository", "{{.DomainName}}")),
	}
}

type {{.DomainNamePlural}}Storage struct {
	ses      *mg.Session
	collName string
	auditService audit.ChangeLogService
	logger   *zap.Logger
}

func (r *{{.DomainNamePlural}}Storage) Insert(ctx context.Context, {{.DomainName}} *model.{{.DomainNameCapitalize}}) error {
    if {{.DomainName}}.ID == "" {
        {{.DomainName}}.ID = xid.New().String()
    }

    if {{.DomainName}}.CreatedAt.IsZero() {
        {{.DomainName}}.CreatedAt = time.Now()
    }

    changeLog := &auditModel.ChangeLog{To: {{.DomainName}}, ObjectResource: objectResource, ObjectAction: "insert", UserID: {{.DomainName}}.CreatedBy, ObjectID: {{.DomainName}}.ID}
	r.auditService.Insert(ctx, changeLog)

    {{.DomainName}}.LastAuditID = changeLog.ID

    _, err := r.collection().InsertOne(ctx, {{.DomainName}})
    if err != nil {
        return errors.New("failed to insert {{.DomainName}}")
    }


    return nil
}

func (r *{{.DomainNamePlural}}Storage) Update(ctx context.Context, {{.DomainName}} *model.{{.DomainNameCapitalize}}) error {
    from, err := r.oneByFilter(ctx, bson.M{"_id": {{.DomainName}}.ID})
    if err != nil {
        return err
    }

    changeLog := &auditModel.ChangeLog{From: from, To: {{.DomainName}}, ObjectResource: objectResource, ObjectAction: "update", UserID: {{.DomainName}}.UpdatedBy, ObjectID: {{.DomainName}}.ID}
	r.auditService.Insert(ctx, changeLog)

    {{.DomainName}}.LastAuditID = changeLog.ID

    _, err = r.collection().UpdateOne(
        ctx,
        bson.M{"_id": {{.DomainName}}.ID},
        bson.M{"$set": {{.DomainName}}},
    )
    if err != nil {
        return errors.New("failed to update {{.DomainName}}")
    }



    return nil
}

func (r *{{.DomainNamePlural}}Storage) Delete(ctx context.Context, id string) error {
    from, err := r.oneByFilter(ctx, bson.M{"_id": id})
    if err != nil {
        return err
    }

    _, err = r.collection().DeleteOne(ctx, bson.M{"_id": id})
    if err != nil {
        return errors.New("failed to delete {{.DomainName}}")
    }

    r.auditService.Insert(ctx, &auditModel.ChangeLog{From: from, ObjectResource: objectResource, ObjectAction: "delete", UserID: from.UpdatedBy, ObjectID: id})

    return nil
}

func (r *{{.DomainNamePlural}}Storage) GetByID(ctx context.Context, id string) (*model.{{.DomainNameCapitalize}}, error) {
    return r.oneByFilter(ctx, bson.M{"_id": id})
}

func (r *{{.DomainNamePlural}}Storage) AllPaginate(ctx context.Context, f *model.{{.DomainNameCapitalize}}Filter) ([]model.{{.DomainNameCapitalize}}, *paginate.PaginationData, error) {
    var results []model.{{.DomainNameCapitalize}}

    filter := bson.M{}

    if len(f.IDs) > 0 {
        filter["_id"] = bson.M{"$in": f.IDs}
    }

    q := paginate.New(r.collection()).Context(ctx).Limit(f.GetPerPage())
	sortOrder := -1

    if f.SortOrder == "asc" {
		sortOrder = 1
	}

	if f.SortName != "" {
		q = q.Sort(f.SortName, sortOrder)
	} else {
		q = q.Sort("created_at", sortOrder)
	}

	paginatedData, err := q.Page(f.GetPage()).
		Filter(filter).
		Decode(&results).
		Find()
	if err != nil {
		return nil, nil, err
	}

	return results, &paginatedData.Pagination, nil
}


func (r *{{.DomainNamePlural}}Storage) oneByFilter(ctx context.Context, filter interface{}) (*model.{{.DomainNameCapitalize}}, error) {
	res := r.collection().FindOne(ctx, filter)
	if res.Err() != nil {
		if errors.Is(res.Err(), mongo.ErrNoDocuments) {
			return nil, model.ErrNotFound
		}

		return nil, res.Err()
	}

	var {{.DomainName}} model.{{.DomainNameCapitalize}}

	err := res.Decode(&{{.DomainName}})
	if err != nil {
        return nil, err
    }

	return &{{.DomainName}}, nil
}

func (r *{{.DomainNamePlural}}Storage) Setup(ctx context.Context) error {
	_, err := r.collection().Indexes().CreateMany(
		ctx,
		[]mongo.IndexModel{
			{
				Keys:    bson.M{"created_at": 1},
				Options: options.Index(),
			},
		},
	)

	return err
}

func (r *{{.DomainNamePlural}}Storage) collection() *mongo.Collection {
	return r.ses.Collection(r.collName)
}
